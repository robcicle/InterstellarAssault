#pragma once

// Lua helper to link Lua with our C++/Game

#include <string>
#include <functional>
#include <map>
#include <SimpleMath.h>

// Required Lua libraries
extern "C"
{
#include "../lua-5.4.4/include/lua.h"
#include "../lua-5.4.4/include/lauxlib.h"
#include "../lua-5.4.4/include/lualib.h"
}

#ifdef _WIN32
#pragma comment(lib, "../lua-5.4.4/liblua54.a")
#endif // WIN32

// LuaOK function: Checks Lua stack operation results and handles errors.
bool LuaOK(lua_State* L, int id);


// ******FUNCTIONS******

// CallVoidVoidCFunc function: Calls a Lua function by name with no parameters or return values.
void CallVoidVoidCFunc(lua_State* L, const std::string& fName);
// CallVoidVoidCFunc function: Calls a Lua function by name, passing a single float parameter.
void CallVoidVoidCFunc(lua_State* L, const std::string& fName, float number);

// LuaFRandomNum function: Returns a random number generated by a Lua function within a specified range.
float LuaFRandomNum(lua_State* L, const std::string& fName, float min, float max);

// LuaFLerpNum function: Returns a value interpolated by a Lua function between two floats over a parameter.
float LuaFLerpNum(lua_State* L, const std::string& fName, float a, float b, float t);

// LuaUpdateMusicVol function: Allows a Lua function to update the music volume across the game.
int LuaUpdateMusicVol(lua_State* L);
// LuaAdjustMasterVol function: Allows a Lua function to adjust the master volume across the game.
int LuaAdjustMasterVol(lua_State* L);
// LuaAdjustMusicVol function: Allows a Lua function to adjust the music volume across the game.
int LuaAdjustMusicVol(lua_State* L);
// LuaAdjustGameVol function: Allows a Lua function to adjust the game volume across the game.
int LuaAdjustGameVol(lua_State* L);


// ******VARIABLES*******

// LuaGetInt function: Returns an integer from a Lua script based on the variable name.
int LuaGetInt(lua_State* L, const std::string& name);

// LuaGetNum function: Returns a float from a Lua script based on the variable name.
float LuaGetNum(lua_State* L, const std::string& name);

// LuaGetStr function: Returns a string from a Lua script based on the variable name.
std::string LuaGetStr(lua_State* L, const std::string& name);

// LuaGetVec2 function: Returns a DirectX::SimpleMath::Vector2 from a Lua script based on the variable name.
DirectX::SimpleMath::Vector2 LuaGetVec2(lua_State* L, const std::string& name);


// ***DISPATCHER CLASS***
// Dispatcher class: Acts as an intermediary between C++ and Lua, allowing 
// the registration of C++ class member functions for use in Lua scripts.
class Dispatcher
{
public:
    // Command struct: Holds a function that takes an int and returns void.
    struct Command
    {
        typedef std::function<void(int)> voidintfunc;  // Type definition for a function taking an int.
        voidintfunc voidintfunc;  // Instance of the void(int) function.
    };

    // Init function: Initializes the Dispatcher by registering it with Lua.
    void Init(lua_State* L)
    {
        // Registers 'CDispatcher' as a callable function from Lua scripts.
        lua_register(L, "CDispatcher", LuaCall);
    }

    // Register function: Registers game functions with a given name to the Dispatcher.
    void Register(const std::string& fName, Command cmd)
    {
        // Ensures the function is not already registered.
        assert(library.find(fName) == library.end());
        // Stores the command in the library map under the given function name.
        library[fName] = cmd;
    }

    // LuaCall function: Called from Lua to dispatch the request to the corresponding C++ function.
    static int LuaCall(lua_State* L);

private:
    static std::map<std::string, Command> library;  // Map storing registered functions by name.
};